// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://yaacbkoasdxrwavbwsbu.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlhYWNia29hc2R4cndhdmJ3c2J1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ3MTY4MzQsImV4cCI6MjA2MDI5MjgzNH0.yE1Xdci3eqP9vsVVPzYw9ihd5cYdLi985D8p1NSU-lk";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create the Supabase client with enhanced configuration
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storageKey: 'qr-attendance-storage-key',
    detectSessionInUrl: true,
    flowType: 'pkce',
    debug: true
  },
  global: {
    headers: {
      'Content-Type': 'application/json'
    },
    fetch: (url, options) => {
      const timeout = 15000; // 15 seconds timeout
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), timeout);
      
      return fetch(url, {
        ...options,
        signal: controller.signal
      }).finally(() => clearTimeout(timeoutId));
    }
  },
  db: {
    schema: 'public'
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  }
});

// Enhanced error handling utility for Supabase operations
export const handleSupabaseError = (error: unknown, fallbackMessage: string = "Operation failed"): string => {
  console.error("Supabase error:", error);
  
  if (error instanceof Error) {
    // Network errors
    if (error.message.includes("network") || error.message.includes("fetch")) {
      return "Network error. Please check your connection and try again.";
    }
    // Not found errors
    if (error.message.includes("not found") || error.message.includes("404")) {
      return "The requested resource was not found. Please refresh and try again.";
    }
    // Permission errors
    if (error.message.includes("permission") || error.message.includes("403") || error.message.includes("unauthorized")) {
      return "You don't have permission for this operation. Please log in again.";
    }
    // Timeout errors
    if (error.message.includes("timeout") || error.message.includes("abort")) {
      return "Request timed out. Please check your connection and try again.";
    }
    // Connection errors
    if (error.message.includes("connection")) {
      return "Database connection error. Please check your internet connection.";
    }
    // Return original message if it's short/readable
    if (error.message.length < 100) {
      return error.message;
    }
  }
  
  return fallbackMessage;
};

// Enhanced connection test utility
export const testSupabaseConnection = async (): Promise<boolean> => {
  try {
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error('Connection test timed out')), 5000);
    });

    const testPromise = supabase.from('employees').select('count', { count: 'exact' }).limit(1);
    
    const { error } = await Promise.race([testPromise, timeoutPromise]);
    
    if (error) {
      console.error('Supabase connection test failed:', error);
      return false;
    }
    
    return true;
  } catch (error) {
    console.error('Supabase connection test failed:', error);
    return false;
  }
};
